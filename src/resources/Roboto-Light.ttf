# main.pyimport sysimport osfrom PyQt6.QtWidgets import (    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,    QPushButton, QStackedWidget, QLabel)from PyQt6.QtCore import Qt, QPropertyAnimation, QEasingCurvefrom PyQt6.QtGui import QFontDatabase, QFont# Load Roboto Light font from resourcesdef load_roboto_font():    font_path = os.path.join("resources", "Roboto-Light copy.ttf")    if not os.path.exists(font_path):        print("Error: Font file not found at", font_path)        return "Arial"    font_id = QFontDatabase.addApplicationFont(font_path)    if font_id == -1:        print("Error: Could not load Roboto Light font.")        return "Arial"    families = QFontDatabase.applicationFontFamilies(font_id)    if families:        print("Loaded font families:", families)        return families[0]    return "Arial"default_font_family = load_roboto_font()# Import your module pages (ensure these modules exist)import customer_managerimport menu_managerimport order_managerimport invoice_managerimport email_managerimport template_editorclass HeaderBar(QWidget):    def __init__(self, main_window, nav_items=None):        super().__init__(main_window)        self.main_window = main_window  # store reference to MainWindow        self.setFixedHeight(60)        self.setStyleSheet("""            background-color: #F5F5F7;            border-bottom: 1px solid #CCCCCC;        """)        layout = QHBoxLayout(self)        layout.setContentsMargins(20, 0, 20, 0)        layout.setSpacing(20)                # Title Label        title = QLabel("Tour Group Management")        title.setFont(QFont(default_font_family, 18, QFont.Weight.Light))        title.setStyleSheet("color: #333333;")        layout.addWidget(title)        layout.addStretch()                self.buttons = {}        if nav_items:            for name, widget in nav_items.items():                btn = QPushButton(name)                btn.setStyleSheet("""                    QPushButton {                        background-color: #E0E0E0;                        color: #333333;                        border: none;                        padding: 10px 15px;                        border-radius: 20px;                        font-size: 14px;                    }                    QPushButton:hover {                        background-color: #CCCCCC;                    }                """)                # Connect button click to switch page with animation                btn.clicked.connect(lambda checked, w=widget: self.main_window.switch_page_with_animation(w))                layout.addWidget(btn)                self.buttons[name] = btnclass MainWindow(QMainWindow):    def __init__(self):        super().__init__()        self.setWindowTitle("Tour Group Management")        self.resize(1200, 800)        self.setStyleSheet(self.load_light_mode_styles())                # Set the global font to Roboto Light (or fallback)        self.setFont(QFont(default_font_family, 12, QFont.Weight.Light))                # Central widget and layout        self.central_widget = QWidget()        self.setCentralWidget(self.central_widget)        self.main_layout = QVBoxLayout(self.central_widget)        self.main_layout.setContentsMargins(0, 0, 0, 0)                # Define navigation pages mapping        self.nav_items = {            "Customers": customer_manager.CustomerManager(),            "Menu": menu_manager.MenuManager(),            "Orders": order_manager.OrderManager(),            "Invoices": invoice_manager.InvoiceManager(),            "Email Settings": email_manager.EmailManager(),            "Template Editor": template_editor.TemplateEditor()        }                # Create header bar navigation at the top        self.header = HeaderBar(self, nav_items=self.nav_items)        self.main_layout.addWidget(self.header)                # Create a stacked widget to hold pages        self.pages = QStackedWidget()        self.main_layout.addWidget(self.pages)                # Add each page to the stacked widget        for widget in self.nav_items.values():            self.pages.addWidget(widget)                # Set default page to Order Manager        self.pages.setCurrentWidget(self.nav_items["Orders"])        def switch_page_with_animation(self, widget):        """Switches pages with a fade-out and fade-in animation."""        current_widget = self.pages.currentWidget()        fade_out = QPropertyAnimation(current_widget, b"windowOpacity")        fade_out.setDuration(200)        fade_out.setStartValue(1.0)        fade_out.setEndValue(0.0)        fade_out.setEasingCurve(QEasingCurve.Type.InOutQuad)                fade_in = QPropertyAnimation(widget, b"windowOpacity")        fade_in.setDuration(200)        fade_in.setStartValue(0.0)        fade_in.setEndValue(1.0)        fade_in.setEasingCurve(QEasingCurve.Type.InOutQuad)                fade_out.finished.connect(lambda: [self.pages.setCurrentWidget(widget), fade_in.start()])        fade_out.start()        def load_light_mode_styles(self):        """Returns QSS for light mode styling."""        return """            QMainWindow {                background-color: #FFFFFF;            }            QWidget {                background-color: #FFFFFF;                color: #333333;                font-family: 'Roboto', sans-serif;            }            QPushButton {                background-color: #E0E0E0;                color: #333333;                border-radius: 20px;                padding: 10px;                font-size: 16px;                border: 1px solid #CCCCCC;            }            QPushButton:hover {                background-color: #CCCCCC;            }        """def main():    app = QApplication(sys.argv)    window = MainWindow()    window.show()    sys.exit(app.exec())if __name__ == "__main__":    main()